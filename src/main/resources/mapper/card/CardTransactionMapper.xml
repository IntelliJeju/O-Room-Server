<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.savit.card.mapper.CardTransactionMapper">

    <!-- 전체 사용자 기준 미분류 거래 조회 -->
    <select id="findUnclassifiedTransactions" resultType="com.savit.card.domain.CardTransactionVO">
        SELECT * FROM CardTransaction WHERE category_id IS NULL
    </select>

    <!-- 특정 사용자 기준 미분류 거래 조회 -->
    <select id="findUnclassifiedTransactionsByUser" resultType="com.savit.card.domain.CardTransactionVO">
        SELECT t.*
        FROM CardTransaction t
                 JOIN Card c ON t.card_id = c.id
        WHERE t.category_id IS NULL
          AND c.user_id = #{userId}
    </select>

    <!-- 거래의 카테고리 업데이트 -->
    <update id="updateCategory">
        UPDATE CardTransaction
        SET category_id = #{categoryId},
            updated_at = NOW()
        WHERE id = #{transactionId}
    </update>

    <!-- 카드ID + 날짜 + 시간 + 사용자 기준 거래 ID 조회 -->
    <select id="findTransactionIdByCardIdAndDateTime" resultType="long">
        SELECT t.id
        FROM CardTransaction t
                 JOIN Card c ON t.card_id = c.id
        WHERE c.user_id = #{userId}
          AND t.card_id = #{cardId}
          AND t.res_used_date = #{resUsedDate}
          AND t.res_used_time = #{resUsedTime}
    </select>

    <!-- 해당 거래가 사용자 소유인지 여부 검증 -->
    <select id="isOwnedByUser" resultType="boolean">
        SELECT EXISTS (
            SELECT 1
            FROM CardTransaction t
                     JOIN Card c ON t.card_id = c.id
            WHERE t.id = #{transactionId}
              AND c.user_id = #{userId}
        )
    </select>

    <!--금액 합계 조회: sum()-->
    <select id="sumAmountByParams" parameterType="map" resultType="java.math.BigDecimal">
        SELECT COALESCE(SUM(CAST(res_used_amount AS DECIMAL(12,2))), 0)
        FROM CardTransaction
        WHERE card_id IN
        <foreach collection="cardIds" item="cardId" open="(" separator="," close=")">
            #{cardId}
        </foreach>
        AND category_id = #{categoryId}
        AND STR_TO_DATE(res_used_date, '%Y%m%d') >= DATE_SUB(NOW(), INTERVAL #{previousWeeks} WEEK)
        AND (res_cancel_yn IS NULL OR res_cancel_yn != 'Y')
    </select>

    <!-- 거래 횟수 조회: count(*) -->
    <select id="countByParams" parameterType="map" resultType="Long">
        SELECT COUNT(*)
        FROM CardTransaction
        WHERE card_id IN
        <foreach collection="cardIds" item="cardId" open="(" separator="," close=")">
            #{cardId}
        </foreach>
        AND category_id = #{categoryId}
        AND STR_TO_DATE(res_used_date, '%Y%m%d') >= DATE_SUB(NOW(), INTERVAL #{previousWeeks} WEEK)
        AND (res_cancel_yn IS NULL OR res_cancel_yn != 'Y')
    </select>

    <!-- 특정 날짜의 사용자별 최고 지출 항목 조회 (카테고리명 포함) -->
    <select id="findTopSpendingByUserAndDate" resultType="map">
        SELECT t.*, cat.name as categoryName
        FROM CardTransaction t
        JOIN Card c ON t.card_id = c.id
        JOIN Category cat ON t.category_id = cat.id
        WHERE c.user_id = #{userId}
          AND t.res_used_date = #{targetDate}
          AND (t.res_cancel_yn IS NULL OR t.res_cancel_yn != '1')
          AND t.category_id IS NOT NULL
        ORDER BY CAST(t.res_used_amount AS DECIMAL(12,2)) DESC
        LIMIT 1
    </select>
    <select id="findTransactionBetweenTime" resultType="com.savit.card.domain.CardTransactionVO">
        select
            ct.id,
            ct.card_id,
            ct.res_card_no,
            ct.res_used_date,
            ct.res_used_time,
            ct.res_used_amount,
            ct.res_cancel_yn,
            ct.res_cancel_amount,
            ct.res_total_amount,
            ct.budget_category_id,
            ct.category_id,
            ct.res_member_store_name,
            ct.res_member_store_type,
            ct.created_at,
            ct.updated_at
        from CardTransaction ct
        where  ct.created_at &gt;= #{startTime}
                and ct.created_at &lt; #{endTime}
                and ct.res_cancel_yn != 'Y'
                and ct.category_id is not null
        order by ct.created_at asc
    </select>
    <select id="findTransactionAfterTime" resultType="com.savit.card.domain.CardTransactionVO">
        select ct.id,
               ct.card_id,
               ct.res_card_no,
               ct.res_used_date,
               ct.res_used_time,
               ct.res_used_amount,
               ct.res_cancel_yn,
               ct.res_cancel_amount,
               ct.res_total_amount,
               ct.budget_category_id,
               ct.category_id,
               ct.res_member_store_name,
               ct.res_member_store_type,
               ct.created_at,
               ct.updated_at
        from CardTransaction
        where ct.created_at &gt;= #{lastProcessedTime}
          and ct.res_cancel_yn != 'Y'
  and ct.category_id is not null
        order by ct.created_at asc

    </select>
    <select id="sumAmountByCategoryAndPeriod" resultType="java.math.BigDecimal">
        select coalesce(sum(cast(ct.res_used_amount as decimal(12, 2))), 0)
        from CardTransaction as ct
                 inner join Card as c on ct.card_id = c.id
        where c.user_id = #{userId}
          and ct.category_id = #{categoryId}
          and ct.res_used_date &gt;= #{startDate}
        and ct.res_used_date &lt;= #{endDate}
        and ct.res_cancel_yn !='Y'
    </select>
    <select id="countByCategoryAndPeriod" resultType="java.lang.Long">
        select count(*)
        from CardTransaction as ct
                 inner join Card as c on ct.card_id = c.id
        where c.user_id = #{userId}
          and ct.category_id = #{categoryId}
          and ct.res_used_date &gt;= #{startDate}
          and ct.res_used_date &lt;= #{endDate}
        and ct.res_cancel_yn != 'Y'
    </select>

    <!-- 예치금 가상 결제 카드 트랜잭션 1건 저장 -->
    <insert id="insert" parameterType="com.savit.card.domain.CardTransactionVO">
        INSERT INTO CardTransaction (
            card_id,
            res_card_no,
            res_used_date,
            res_used_time,
            res_used_amount,
            res_cancel_yn,
            res_cancel_amount,
            res_total_amount,
            budget_category_id,
            category_id,
            res_member_store_name,
            res_member_store_type,
            created_at,
            updated_at
        ) VALUES (
                     #{cardId},
                     #{resCardNo},
                     #{resUsedDate},
                     #{resUsedTime},
                     #{resUsedAmount},
                     #{resCancelYn},
                     #{resCancelAmount},
                     #{resTotalAmount},
                     #{budgetCategoryId},
                     #{categoryId},
                     #{resMemberStoreName},
                     #{resMemberStoreType},
                     NOW(),
                     NOW()
                 )
    </insert>

</mapper>
